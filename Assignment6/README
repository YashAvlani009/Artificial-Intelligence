#####################################################################################

Assignment 6 - Propositional Logic 
Name : YASH AVLANI
UTA ID : 1001670008
Programming Language : JAVA

#####################################################################################

To run the Code :

Compile using :
        javac *.java
        

Execute using :
        java CheckTrueFalse wumpus_rules.txt [knowledge base] [statement]  
        for example: java CheckTrueFalse wumpus_rules.txt kb.txt statement.txt
            - the input files are provided.

#####################################################################################


Code Structure :

class CheckTrueFalse :
methods : main(), isValidInput(), get_Symbols(), readExpression(), read_subexpressions(), valid_expression(), valid_symbol()
class : TT_Entails, Model

class TT_Entails :
methods : TT_Entails(), filter_Symbols(), pl_True(), TT_Check_All(), generate_Symbols()

TT_Entails() -> this function check if kb entails it or not.
filter_Symbols() -> filters the symbol from the list.
pl_True() -> this will check kb entailment and truth value.
TT_Check_All() -> checks entailment of function with the knowledge base.
symbol_list() -> fetch symbol from the list
valid_symbol() -> checks whether a unique symbol is valid.
valid_expression() -> checks whether the logical expression is valid or not.
read_subexpressions() -> reads all the unique symbols of a subexpression.
readExpression() -> reads logical expressions.


class LogicalExpression :
methods : setConnective(), print_expression(), setUniqueSymbol()

setConnective() -> this method sets the connective for this LogicalExpression and returns the rest of the string to collect the symbols for it.
print_expression() -> prints the expressions.
setUniqueSymbol() -> this method sets the symbol for the LogicalExpression it checks to make sure that it starts with one of the appropriate letters, 
                        then checks to make sure that the rest of the string is either digits or '_'.


#####################################################################################


Knowledge base file named kb.txt designed as follows:

    At 1,1, there is no monster, pit, stench, breeze.
    At 2,1, there is no monster, pit, stench, breeze.
    At 3,1, there is breeze but no monster, pit, stench.
    At 4,1, there is no monster, pit, stench, breeze.
    At 1,2, there is no monster, pit, stench, breeze.
    At 2,2, there is breeze but no monster, pit, stench.
    At 3,2, there is pit but no monster, stench, breeze.
    At 4,2, there is breeze but no monster, pit, stench.
    At 1,3, there is breeze but no monster, pit, stench.
    At 2,3, there is no monster, pit, stench, breeze.
    At 3,3, there is breeze but no monster, pit, stench.
    At 4,3, there is stench but no monster, pit, breeze.
    At 1,4, there is pit but no monster, stench, breeze.
    At 2,4, there is breeze but no monster, pit, stench.
    At 3,4, there is stench but no monster, pit, breeze.
    At 4,4, there is monster but no stench, pit, breeze.

Hence, for a statement.txt file:

M_4_4

The result will be "definitely true"

For,

M_3_1

The result will be "definitely false"
